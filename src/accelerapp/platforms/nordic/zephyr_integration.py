"""
Zephyr RTOS integration for Nordic nRF platforms.
Generates Zephyr-compatible project files and configurations.
"""

from typing import Dict, Any, List
from pathlib import Path


class ZephyrIntegration:
    """
    Integration with Zephyr RTOS for Nordic nRF platforms.
    Generates prj.conf, CMakeLists.txt, and devicetree overlays.
    """

    def __init__(self, board: str = "nrf52840dk_nrf52840"):
        """
        Initialize Zephyr integration.
        
        Args:
            board: Zephyr board name
        """
        self.board = board
        
    def generate_prj_conf(self, config: Dict[str, Any]) -> str:
        """
        Generate Zephyr project configuration file (prj.conf).
        
        Args:
            config: Project configuration
            
        Returns:
            Configuration file content
        """
        lines = [
            "# Zephyr Project Configuration",
            f"# Board: {self.board}",
            f"# Generated by Accelerapp v2.0",
            "",
            "# Kernel Configuration",
            "CONFIG_HEAP_MEM_POOL_SIZE=2048",
            "CONFIG_MAIN_STACK_SIZE=2048",
            "CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE=2048",
            "",
        ]
        
        # BLE configuration
        if config.get("ble_enabled"):
            lines.extend([
                "# Bluetooth Configuration",
                "CONFIG_BT=y",
                "CONFIG_BT_PERIPHERAL=y",
                "CONFIG_BT_DEVICE_NAME=\"" + config.get("device_name", "Nordic_Device") + "\"",
                "CONFIG_BT_MAX_CONN=1",
                "CONFIG_BT_GAP_PERIPHERAL_PREF_PARAMS=n",
                "",
            ])
        
        # Logging configuration
        if config.get("logging_enabled", True):
            lines.extend([
                "# Logging Configuration",
                "CONFIG_LOG=y",
                "CONFIG_LOG_PRINTK=y",
                "CONFIG_CONSOLE=y",
                "CONFIG_UART_CONSOLE=y",
                "",
            ])
        
        # GPIO configuration
        if config.get("gpio_enabled"):
            lines.extend([
                "# GPIO Configuration",
                "CONFIG_GPIO=y",
                "",
            ])
        
        # PWM configuration
        if config.get("pwm_enabled"):
            lines.extend([
                "# PWM Configuration",
                "CONFIG_PWM=y",
                "",
            ])
        
        # I2C configuration
        if config.get("i2c_enabled"):
            lines.extend([
                "# I2C Configuration",
                "CONFIG_I2C=y",
                "",
            ])
        
        # SPI configuration
        if config.get("spi_enabled"):
            lines.extend([
                "# SPI Configuration",
                "CONFIG_SPI=y",
                "",
            ])
        
        return "\n".join(lines)
    
    def generate_cmakelists(self, config: Dict[str, Any]) -> str:
        """
        Generate CMakeLists.txt for Zephyr project.
        
        Args:
            config: Project configuration
            
        Returns:
            CMakeLists.txt content
        """
        project_name = config.get("project_name", "nrf_app")
        
        lines = [
            "# Zephyr CMake Configuration",
            f"# Generated by Accelerapp v2.0",
            "",
            "cmake_minimum_required(VERSION 3.20.0)",
            "",
            "find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})",
            f'project({project_name})',
            "",
            "target_sources(app PRIVATE src/main.c)",
            "",
        ]
        
        # Add additional source files
        source_files = config.get("source_files", [])
        for source_file in source_files:
            lines.append(f"target_sources(app PRIVATE {source_file})")
        
        return "\n".join(lines)
    
    def generate_devicetree_overlay(self, config: Dict[str, Any]) -> str:
        """
        Generate devicetree overlay for custom hardware configuration.
        
        Args:
            config: Hardware configuration
            
        Returns:
            Devicetree overlay content
        """
        lines = [
            "/* Devicetree Overlay */",
            f"/* Board: {self.board} */",
            "",
        ]
        
        # LED configuration
        if config.get("leds"):
            lines.extend([
                "/ {",
                "    leds {",
                "        compatible = \"gpio-leds\";",
            ])
            
            for i, led in enumerate(config["leds"]):
                pin = led.get("pin", 13)
                lines.append(f"        led{i}: led_{i} {{")
                lines.append(f"            gpios = <&gpio0 {pin} GPIO_ACTIVE_LOW>;")
                lines.append(f"            label = \"LED {i}\";")
                lines.append("        };")
            
            lines.extend([
                "    };",
                "};",
                "",
            ])
        
        # Button configuration
        if config.get("buttons"):
            lines.extend([
                "/ {",
                "    buttons {",
                "        compatible = \"gpio-keys\";",
            ])
            
            for i, button in enumerate(config["buttons"]):
                pin = button.get("pin", 11)
                lines.append(f"        button{i}: button_{i} {{")
                lines.append(f"            gpios = <&gpio0 {pin} (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;")
                lines.append(f"            label = \"Button {i}\";")
                lines.append("        };")
            
            lines.extend([
                "    };",
                "};",
                "",
            ])
        
        return "\n".join(lines)
    
    def generate_complete_project(self, config: Dict[str, Any], output_dir: Path) -> Dict[str, str]:
        """
        Generate complete Zephyr project structure.
        
        Args:
            config: Complete project configuration
            output_dir: Output directory
            
        Returns:
            Dictionary of generated files
        """
        files = {}
        
        # Create project structure
        (output_dir / "src").mkdir(parents=True, exist_ok=True)
        
        # Generate prj.conf
        prj_conf_path = output_dir / "prj.conf"
        prj_conf_content = self.generate_prj_conf(config)
        prj_conf_path.write_text(prj_conf_content)
        files["prj.conf"] = str(prj_conf_path)
        
        # Generate CMakeLists.txt
        cmake_path = output_dir / "CMakeLists.txt"
        cmake_content = self.generate_cmakelists(config)
        cmake_path.write_text(cmake_content)
        files["CMakeLists.txt"] = str(cmake_path)
        
        # Generate devicetree overlay
        overlay_path = output_dir / f"{self.board}.overlay"
        overlay_content = self.generate_devicetree_overlay(config)
        overlay_path.write_text(overlay_content)
        files["overlay"] = str(overlay_path)
        
        return files
